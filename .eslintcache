[{"D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\InputForm.jsx":"1","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\Search.jsx":"2","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\App.js":"3","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\index.js":"4","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\LocalStorageBtn.jsx":"5","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\FbReducer.jsx":"6","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\PhoneInfo.jsx":"7","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\PhoneInfoList.jsx":"8","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\FbStore.jsx":"9","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\Appbar.jsx":"10","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\useFetch.jsx":"11"},{"size":2560,"mtime":1607762261558,"results":"12","hashOfConfig":"13"},{"size":2643,"mtime":1607763325146,"results":"14","hashOfConfig":"13"},{"size":1415,"mtime":1607767425586,"results":"15","hashOfConfig":"13"},{"size":168,"mtime":1606721243093,"results":"16","hashOfConfig":"13"},{"size":1461,"mtime":1607758323070,"results":"17","hashOfConfig":"13"},{"size":2120,"mtime":1607760430150,"results":"18","hashOfConfig":"13"},{"size":4004,"mtime":1607767817664,"results":"19","hashOfConfig":"13"},{"size":2285,"mtime":1607769721052,"results":"20","hashOfConfig":"13"},{"size":2915,"mtime":1607758890669,"results":"21","hashOfConfig":"13"},{"size":1332,"mtime":1607768850519,"results":"22","hashOfConfig":"13"},{"size":1200,"mtime":1607651119055,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"qopu7f",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\InputForm.jsx",["51"],"import React, { useRef, useCallback } from \"react\";\r\n// import { FbContext } from \"./FbStore\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    boxShadow: \"1px 1px 3px #000\",\r\n    padding: \"30px 0\",\r\n    borderRadius: \"5px\",\r\n  },\r\n}));\r\n\r\nconst InputForm = ({ dispatch, index }) => {\r\n  const classes = useStyles();\r\n  // const { dispatch } = useContext(FbContext);\r\n  // let [idx, setIdx] = useState(index);\r\n  const nameRef = useRef();\r\n  const numberRef = useRef();\r\n\r\n  const addFbook = useCallback(\r\n    (e) => {\r\n      console.log(\"inputform데이터---\", nameRef);\r\n      e.preventDefault();\r\n      dispatch({\r\n        type: \"ADD_Fb_DATA\",\r\n        payload: {\r\n          id: index + 1,\r\n          name: nameRef.current.value,\r\n          number: numberRef.current.value,\r\n          editing: false,\r\n        },\r\n      });\r\n      nameRef.current.value = \"\";\r\n      numberRef.current.value = \"\";\r\n      // setIdx(++idx);\r\n    },\r\n    [index]\r\n  );\r\n\r\n  console.log(\"InputForm 실행\");\r\n  return (\r\n    <>\r\n      <form className={classes.form}>\r\n        <TextField\r\n          autoFocus=\"true\"\r\n          label=\"Name\"\r\n          variant=\"standard\"\r\n          inputRef={nameRef}\r\n          size=\"small\"\r\n        />\r\n        <span>&nbsp;&nbsp;</span>\r\n        <TextField\r\n          label=\"Phone-NUM\"\r\n          variant=\"standard\"\r\n          size=\"small\"\r\n          inputRef={numberRef}\r\n        />\r\n        {/* <input type=\"text\" placeholder=\"이름\"></input>\r\n        <input type=\"text\" placeholder=\"전화번호\"></input> */}\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          className={classes.button}\r\n          startIcon={<SaveIcon />} //머리부분 아이콘\r\n          onClick={addFbook}\r\n          disableElevation //약간 돌출된 효과 없애기\r\n        >\r\n          Save\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(InputForm); //단순히 props의 값이 같은지만 얕은 비교 한다고 함. 해서 다를때만 다시 렌더링\r\n\r\n// 깊은 비교를 하고 싶을 경우 추가\r\n// function areEqual(preProps, nextProps) {\r\n//   return preProps !== nextProps;\r\n// }\r\n\r\n// export default React.memo(InputForm, areEqual);\r\n","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\Search.jsx",["52"],"import React, { useRef, useCallback } from \"react\";\r\n// import { FbContext } from \"./FbStore\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ReplyIcon from \"@material-ui/icons/Reply\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    position: \"absolute\",\r\n  },\r\n  form: {\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    padding: \"10px 0\",\r\n    width: \"95%\",\r\n  },\r\n}));\r\n\r\nconst Search = ({ dispatch }) => {\r\n  console.log(\"Search 실행\");\r\n  // const {dispatch} = useContext(FbContext);\r\n  const searchRef = useRef();\r\n\r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"SEARCH_NAME\", payload: searchRef.current.value });\r\n    searchRef.current.value = \"\";\r\n  };\r\n  //컴포넌트가 재렌더링 되면 그안의 함수 선언도 다시 메모리에 띄워진다. 내용의 변화가\r\n  //없는데도 바뀌는 건 낭비. 이를 막기위해 '변화가 없을시 기존 함수를 다시써라'라는 의미로\r\n  //useCallback을 사용. 특정변화에만 반응하도록 하기 위해선 2번째 인자 활용. callback으로\r\n  //정의한 함수 바깥의 요소를 감시대상으로 선정하면 된다.\r\n\r\n  const handleGoback = useCallback((e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"SEARCH_NAME\", payload: \"\" });\r\n    searchRef.current.value = \"\";\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit=\"false\">\r\n      <input hidden=\"hidden\" />\r\n      {/* 인풋창이 2개이상이면 엔터키 눌러도 submit실행 안됨. 이를 막기위함 */}\r\n      <TextField\r\n        label=\"Search\"\r\n        variant=\"outlined\"\r\n        inputRef={searchRef}\r\n        size=\"small\"\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n        startIcon={<SearchIcon />} //머리부분 아이콘\r\n        onClick={handleSearch}\r\n        style={{ transform: \"translate(-160px, -10%\" }}\r\n      >\r\n        Search\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        size=\"small\"\r\n        className={classes.button}\r\n        startIcon={<ReplyIcon />} //머리부분 아이콘\r\n        onClick={handleGoback}\r\n        style={{ transform: \"translate(168px, -10%\" }}\r\n      >\r\n        Contents\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default React.memo(Search);\r\n",["53","54"],"D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\App.js",[],"D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\index.js",[],"D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\LocalStorageBtn.jsx",["55"],"import React, { useCallback } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nconst LocalStorageBtn = ({ Fbooks }) => {\r\n  const saveToLS = (e) => {\r\n    e.preventDefault();\r\n    localStorage.setItem(\"Fbooks\", JSON.stringify(Fbooks));\r\n    alert(\"전화번호부가 브라우저에 저장되었습니다.\");\r\n  };\r\n\r\n  const deleteLS = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (window.confirm(\"정말 전화번호부를 삭제하시겠습니까?\")) {\r\n      localStorage.clear();\r\n      alert(\"삭제되었습니다\");\r\n    } else {\r\n      alert(\"삭제가 취소되었습니다.\");\r\n    }\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <ButtonGroup\r\n        variant=\"text\"\r\n        color=\"primary\"\r\n        aria-label=\"text primary button group\"\r\n      >\r\n        <Button onClick={saveToLS}>임시 백업</Button>\r\n        <Button onClick={deleteLS}>백업 삭제</Button>\r\n      </ButtonGroup>\r\n      {/* <button onClick={saveToLS}>임시 백업</button>\r\n      <button onClick={deleteLS}>백업 삭제</button> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(LocalStorageBtn);\r\n","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\FbReducer.jsx",[],"D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\PhoneInfo.jsx",["56","57","58","59"],"import React, { useRef, useState, useContext, useCallback } from \"react\";\r\nimport { FbContext } from \"./FbStore\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nconst PhoneInfo = ({ data }) => {\r\n  // props로 받음\r\n  const { dispatch } = useContext(FbContext);\r\n  const itemRef = useRef();\r\n\r\n  const [input, setInput] = useState({ name: data.name, number: data.number });\r\n  // const [valueName, setVlNm] = useState(data.name);\r\n  // const [valueNumber, setVlNmbr] = useState(data.number);\r\n\r\n  const FbRemove = useCallback((e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"DEL_Fb_DATA\", payload: itemRef.current.dataset.id });\r\n  }, []);\r\n  //컴포넌트가 재렌더링 되면 그안의 함수 선언도 다시 메모리에 띄워진다. 내용의 변화가\r\n  //없는데도 바뀌는 건 낭비. 이를 막기위해 '변화가 없을시 기존 함수을 다시써라'라는 의미로\r\n  //useCallback을 사용. 특정변화에만 반응하도록 하기 위해선 2번째 인자 활용. callback으로\r\n  //정의한 함수 바깥의 요소를 감시대상으로 선정하면 된다.\r\n\r\n  const ModeChange = useCallback((e) => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: \"CHAGE_EDIT_MODE\",\r\n      payload: itemRef.current.dataset.id,\r\n    });\r\n  }, []);\r\n\r\n  const inputChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n      setInput({\r\n        ...input, //불변성 유지를 위해 기존객체를 복사해 온 후,\r\n        [name]: value, // 새로운 값을 주는데 기존의 key가 있다면 값을 바꿔 줌\r\n      });\r\n    },\r\n    [input]\r\n  );\r\n\r\n  // const inputNmChange = (e) => {\r\n  //   setVlNm(nameRef.current.value);\r\n  // };\r\n  // const inputNmbrChange = (e) => {\r\n  //   setVlNmbr(numberRef.current.value);\r\n  // };\r\n\r\n  const changeFb = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      dispatch({\r\n        type: \"CHANGE_Fb\",\r\n        payload: {\r\n          id: data.id,\r\n          name: input.name,\r\n          number: input.number,\r\n        },\r\n      });\r\n    },\r\n    [input]\r\n  );\r\n\r\n  const classes = useStyles();\r\n\r\n  if (!data.editing) {\r\n    return (\r\n      // <div style={style} data-id={data.id} ref={itemRef}>\r\n      <div data-id={data.id} ref={itemRef}>\r\n        <Typography variant=\"h6\" style={{ color: \"rgba(0,0,0,0.55)\" }}>\r\n          {data.name} : {data.number}\r\n          <span>&nbsp;&nbsp;</span>\r\n          <ButtonGroup\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            aria-label=\"contained primary button group\"\r\n            disableElevation\r\n          >\r\n            <Button onClick={FbRemove}>삭제</Button>\r\n            <Button onClick={ModeChange}>수정</Button>\r\n          </ButtonGroup>\r\n        </Typography>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div data-id={data.id} ref={itemRef}>\r\n        <TextField\r\n          autoFocus=\"true\"\r\n          label=\"Name\"\r\n          variant=\"standard\"\r\n          size=\"small\"\r\n          value={input.name}\r\n          name=\"name\"\r\n          onChange={inputChange}\r\n        />\r\n        <span>&nbsp;&nbsp;</span>\r\n        <TextField\r\n          label=\"Phone-NUM\"\r\n          variant=\"standard\"\r\n          size=\"small\"\r\n          value={input.number}\r\n          name=\"number\"\r\n          onChange={inputChange}\r\n        />\r\n        <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n          <Button onClick={FbRemove}>삭제</Button>\r\n          <Button onClick={changeFb}>변경</Button>\r\n        </ButtonGroup>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default PhoneInfo;\r\n","D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\PhoneInfoList.jsx",["60"],"D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\FbStore.jsx",[],"D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\Appbar.jsx",["61","62"],"D:\\김건\\개인자료\\JavaScript_PJT\\Nomad\\rct_hooks_phonebook\\src\\componets\\useFetch.jsx",["63"],{"ruleId":"64","severity":1,"message":"65","line":45,"column":5,"nodeType":"66","endLine":45,"endColumn":12,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"65","line":42,"column":6,"nodeType":"66","endLine":42,"endColumn":8,"suggestions":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":34,"column":9,"nodeType":"75","messageId":"76","endLine":34,"endColumn":16},{"ruleId":"64","severity":1,"message":"77","line":32,"column":6,"nodeType":"66","endLine":32,"endColumn":8,"suggestions":"78"},{"ruleId":"64","severity":1,"message":"77","line":44,"column":6,"nodeType":"66","endLine":44,"endColumn":8,"suggestions":"79"},{"ruleId":"64","severity":1,"message":"80","line":76,"column":5,"nodeType":"66","endLine":76,"endColumn":12,"suggestions":"81"},{"ruleId":"73","severity":1,"message":"74","line":79,"column":9,"nodeType":"75","messageId":"76","endLine":79,"endColumn":16},{"ruleId":"82","severity":1,"message":"83","line":38,"column":7,"nodeType":"84","endLine":38,"endColumn":74},{"ruleId":"85","severity":1,"message":"86","line":34,"column":13,"nodeType":"84","endLine":37,"endColumn":14},{"ruleId":"87","severity":1,"message":"88","line":35,"column":20,"nodeType":"89","messageId":"90","endLine":35,"endColumn":61},{"ruleId":"64","severity":1,"message":"91","line":37,"column":6,"nodeType":"66","endLine":37,"endColumn":8,"suggestions":"92"},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["93"],["94"],"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["97"],["98"],"React Hook useCallback has missing dependencies: 'data.id' and 'dispatch'. Either include them or remove the dependency array.",["99"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","React Hook useEffect has a missing dependency: 'setInitData'. Either include it or remove the dependency array.",["100"],{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"105"},{"desc":"103","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [dispatch, index]",{"range":"111","text":"112"},"Update the dependencies array to be: [dispatch]",{"range":"113","text":"114"},{"range":"115","text":"114"},{"range":"116","text":"114"},"Update the dependencies array to be: [data.id, dispatch, input.name, input.number]",{"range":"117","text":"118"},"Update the dependencies array to be: [setInitData]",{"range":"119","text":"120"},[1249,1256],"[dispatch, index]",[1315,1317],"[dispatch]",[1059,1061],[1449,1451],[2153,2160],"[data.id, dispatch, input.name, input.number]",[1011,1013],"[setInitData]"]
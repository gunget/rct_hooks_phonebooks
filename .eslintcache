[{"D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\App.js":"1","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\InputForm.jsx":"2","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\PhoneInfo.jsx":"3","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\Search.jsx":"4","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\FbReducer.jsx":"5","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\PhoneInfoList.jsx":"6","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\FbStore.jsx":"7","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\useFetch.jsx":"8","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\LocalStorageBtn.jsx":"9","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\index.js":"10"},{"size":475,"mtime":1607492725554,"results":"11","hashOfConfig":"12"},{"size":1440,"mtime":1607497066311,"results":"13","hashOfConfig":"12"},{"size":3096,"mtime":1607484663638,"results":"14","hashOfConfig":"12"},{"size":1311,"mtime":1607484725739,"results":"15","hashOfConfig":"12"},{"size":1940,"mtime":1607500103991,"results":"16","hashOfConfig":"12"},{"size":673,"mtime":1607477801923,"results":"17","hashOfConfig":"12"},{"size":2841,"mtime":1607498636001,"results":"18","hashOfConfig":"12"},{"size":1110,"mtime":1607500082473,"results":"19","hashOfConfig":"12"},{"size":795,"mtime":1607499568814,"results":"20","hashOfConfig":"12"},{"size":174,"mtime":1607039129838,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gb9dbd",{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\App.js",[],"D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\InputForm.jsx",["46","47","48","49"],"import React, { useContext, useRef, useState, useCallback } from \"react\";\r\nimport { FbContext } from \"./FbStore\";\r\n\r\nconst InputForm = ({ dispatch, index }) => {\r\n  // const { dispatch } = useContext(FbContext);\r\n  // let [idx, setIdx] = useState(index);\r\n  const nameRef = useRef();\r\n  const numberRef = useRef();\r\n  console.log(\"inputform인덱스\", index);\r\n\r\n  const addFbook = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      dispatch({\r\n        type: \"ADD_Fb_DATA\",\r\n        payload: {\r\n          id: index + 1,\r\n          name: nameRef.current.value,\r\n          number: numberRef.current.value,\r\n          editing: false,\r\n        },\r\n      });\r\n      nameRef.current.value = \"\";\r\n      numberRef.current.value = \"\";\r\n      // setIdx(++idx);\r\n    },\r\n    [index]\r\n  );\r\n\r\n  console.log(\"InputForm 실행\");\r\n  return (\r\n    <>\r\n      <form>\r\n        <input type=\"text\" placeholder=\"이름\" ref={nameRef}></input>\r\n        <input type=\"text\" placeholder=\"전화번호\" ref={numberRef}></input>\r\n        <button onClick={addFbook}>저장</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(InputForm); //단순히 props의 값이 같은지만 얕은 비교 한다고 함. 해서 다를때만 다시 렌더링\r\n\r\n// 깊은 비교를 하고 싶을 경우 추가\r\n// function areEqual(preProps, nextProps) {\r\n//   return preProps !== nextProps;\r\n// }\r\n\r\n// export default React.memo(InputForm, areEqual);\r\n",["50","51"],"D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\PhoneInfo.jsx",["52","53","54"],"import React, { useState, useContext, useCallback } from \"react\";\r\nimport { FbContext } from \"./FbStore\";\r\n\r\nconst PhoneInfo = ({ data }) => {\r\n  // props로 받음\r\n  const { dispatch } = useContext(FbContext);\r\n  // const nameRef = useRef();\r\n  // const numberRef = useRef();\r\n\r\n  const [input, setInput] = useState({ name: data.name, number: data.number });\r\n  // const [valueName, setVlNm] = useState(data.name);\r\n  // const [valueNumber, setVlNmbr] = useState(data.number);\r\n\r\n  const style = {\r\n    backgroundColor: \"skyblue\",\r\n    width: \"100%\",\r\n    opacity: \"0.85\",\r\n  };\r\n\r\n  const FbRemove = useCallback((e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"DEL_Fb_DATA\", payload: e.target.parentNode.dataset.id });\r\n  }, []);\r\n  //컴포넌트가 재렌더링 되면 그안의 함수 선언도 다시 메모리에 띄워진다. 내용의 변화가\r\n  //없는데도 바뀌는 건 낭비. 이를 막기위해 '변화가 없을시 기존 함수을 다시써라'라는 의미로\r\n  //useCallback을 사용. 특정변화에만 반응하도록 하기 위해선 2번째 인자 활용. callback으로\r\n  //정의한 함수 바깥의 요소를 감시대상으로 선정하면 된다.\r\n\r\n  const ModeChange = useCallback((e) => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: \"CHAGE_EDIT_MODE\",\r\n      payload: e.target.parentNode.dataset.id,\r\n    });\r\n  }, []);\r\n\r\n  const inputChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target;\r\n      setInput({\r\n        ...input, //불변성 유지를 위해 기존객체를 복사해 온 후,\r\n        [name]: value, // 새로운 값을 주는데 기존의 key가 있다면 값을 바꿔 줌\r\n      });\r\n    },\r\n    [input]\r\n  );\r\n\r\n  // const inputNmChange = (e) => {\r\n  //   setVlNm(nameRef.current.value);\r\n  // };\r\n  // const inputNmbrChange = (e) => {\r\n  //   setVlNmbr(numberRef.current.value);\r\n  // };\r\n\r\n  const changeFb = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      dispatch({\r\n        type: \"CHANGE_Fb\",\r\n        payload: {\r\n          id: data.id,\r\n          name: input.name,\r\n          number: input.number,\r\n        },\r\n      });\r\n    },\r\n    [input]\r\n  );\r\n\r\n  if (!data.editing) {\r\n    return (\r\n      <div style={style} data-id={data.id}>\r\n        {data.name} {data.number}\r\n        <span> </span>\r\n        <button onClick={FbRemove}>삭제</button>\r\n        <button onClick={ModeChange}>수정</button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div style={style} data-id={data.id}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"이름\"\r\n          value={input.name}\r\n          // ref={nameRef}\r\n          name=\"name\"\r\n          onChange={inputChange}\r\n        ></input>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"전화번호\"\r\n          value={input.number}\r\n          // ref={numberRef}\r\n          name=\"number\"\r\n          onChange={inputChange}\r\n        ></input>\r\n        <button onClick={FbRemove}>삭제</button>\r\n        <button onClick={changeFb}>적용</button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default PhoneInfo;\r\n","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\Search.jsx",["55","56"],"import React, { useRef, useCallback } from \"react\";\r\n// import { FbContext } from \"./FbStore\";\r\n\r\nconst Search = ({ dispatch }) => {\r\n  console.log(\"Search 실행\");\r\n  // const {dispatch} = useContext(FbContext);\r\n  const searchRef = useRef(false);\r\n\r\n  const handleSearch = useCallback((e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"SEARCH_NAME\", payload: searchRef.current.value });\r\n  }, []);\r\n  //컴포넌트가 재렌더링 되면 그안의 함수 선언도 다시 메모리에 띄워진다. 내용의 변화가\r\n  //없는데도 바뀌는 건 낭비. 이를 막기위해 '변화가 없을시 기존 함수를 다시써라'라는 의미로\r\n  //useCallback을 사용. 특정변화에만 반응하도록 하기 위해선 2번째 인자 활용. callback으로\r\n  //정의한 함수 바깥의 요소를 감시대상으로 선정하면 된다.\r\n\r\n  const handleGoback = useCallback((e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"SEARCH_NAME\", payload: \"\" });\r\n    searchRef.current.value = \"\";\r\n  }, []);\r\n\r\n  return (\r\n    <form>\r\n      <input type=\"text\" placeholder=\"검색어\" ref={searchRef}></input>\r\n      <button onClick={handleSearch}>이름검색</button>\r\n      <button onClick={handleGoback}>목록으로</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default React.memo(Search);\r\n","D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\FbReducer.jsx",[],"D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\PhoneInfoList.jsx",[],"D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\FbStore.jsx",[],"D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\useFetch.jsx",["57"],"D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\componets\\LocalStorageBtn.jsx",[],"D:\\개인자료\\김건\\javascript\\react\\rct_hooks_phonebooks\\src\\index.js",[],{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":27},{"ruleId":"58","severity":1,"message":"62","line":1,"column":37,"nodeType":"60","messageId":"61","endLine":1,"endColumn":45},{"ruleId":"58","severity":1,"message":"63","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":19},{"ruleId":"64","severity":1,"message":"65","line":27,"column":5,"nodeType":"66","endLine":27,"endColumn":12,"suggestions":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"64","severity":1,"message":"72","line":23,"column":6,"nodeType":"66","endLine":23,"endColumn":8,"suggestions":"73"},{"ruleId":"64","severity":1,"message":"72","line":35,"column":6,"nodeType":"66","endLine":35,"endColumn":8,"suggestions":"74"},{"ruleId":"64","severity":1,"message":"75","line":67,"column":5,"nodeType":"66","endLine":67,"endColumn":12,"suggestions":"76"},{"ruleId":"64","severity":1,"message":"65","line":12,"column":6,"nodeType":"66","endLine":12,"endColumn":8,"suggestions":"77"},{"ruleId":"64","severity":1,"message":"65","line":22,"column":6,"nodeType":"66","endLine":22,"endColumn":8,"suggestions":"78"},{"ruleId":"64","severity":1,"message":"79","line":36,"column":6,"nodeType":"66","endLine":36,"endColumn":8,"suggestions":"80"},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'FbContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["81"],"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["84"],["85"],"React Hook useCallback has missing dependencies: 'data.id' and 'dispatch'. Either include them or remove the dependency array.",["86"],["87"],["88"],"React Hook useEffect has a missing dependency: 'setInitData'. Either include it or remove the dependency array.",["89"],{"desc":"90","fix":"91"},"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"92","fix":"94"},{"desc":"95","fix":"96"},{"desc":"92","fix":"97"},{"desc":"92","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [dispatch, index]",{"range":"101","text":"102"},"Update the dependencies array to be: [dispatch]",{"range":"103","text":"104"},{"range":"105","text":"104"},"Update the dependencies array to be: [data.id, dispatch, input.name, input.number]",{"range":"106","text":"107"},{"range":"108","text":"104"},{"range":"109","text":"104"},"Update the dependencies array to be: [setInitData]",{"range":"110","text":"111"},[768,775],"[dispatch, index]",[730,732],"[dispatch]",[1124,1126],[1828,1835],"[data.id, dispatch, input.name, input.number]",[398,400],[777,779],[921,923],"[setInitData]"]
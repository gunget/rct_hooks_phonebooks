정리하면, fetch 가 진행되기 전까지 로컬작업 환경은 리포지토리의 상황을 알지 못하며
 fetch 를 통해 repository 의 정보를 가져오며 이때 로컬파일들에 어떠한 변경도 만들지 않는다.  

이렇게 업데이트 된 정보를 이용해서 merge, log 등의 작업을 진행한다. 따라서, 특히 리포지토리에
 push 등의 작업을 할 경우 내 로컬 작업 환경에 리포지토리의 커밋내역을 정확히 가지고 있지 않으면 
정상적으로 push 가 되지 않고 에러가 난다.

그래서 일반적(충돌- conflict 이 일어나지 않는 경우)으로 push 할 때 작업수행은 아래와 같이 진행한다. 

git add . && git commit -m 'message' && git fetch origin master && git merge origin/master && git push origin master


---------- 여러대의 pc에서 깃허브로 작업하기
1. 새로운 pc로 가서 git 설치
2. git clone "repository 주소"로 내용 복사
3. 작업한 뒤 git add . && git commit -m 'message' && git fetch origin master && git merge origin/master && git push origin master
4. git Id와 password를 묻는 팝업 뜸
   !!!! 이때 반드시 기본브라우저가 chrome이나 edge여야함. explore로 되어있으면 authorize버튼이 안 눌러짐 

---------- react 프로젝트 github에서 받아서 실행하는 방법
Open your terminal and then type

$ git clone {the url to the GitHub repo}

This clones the repo

cd into the new folder and typegit

$ npm install (nodejs 미리 설치 되어있어야 함)

This installs the required dependencies

To run the React project.
$ npm start

-------- 장고 프로젝트 github에서 받아 실행하는 방법
1. 루트폴더를 만들고 vscode로 연다.
2. 터미널(git bash)로 들어가 가상환경을 만든다.
- python -m venv myvenv
3. 가상환경을 activate한다.
- source myvenv/Scripts/activate (git bash 상태에서)
4. github에서 해당 프로젝트를 clone한다
- 용량문제때문에 github에는 보통 venv, DB는 제외하고, 해당 프로젝트(startproject)만 올린다.
- git clone URLs
- 성공하면 git에설정한 프로젝트명으로 폴더가 생긴다.
- 장고, 장고에서 사용한 패키지, gitIgnore에 추가했던 내용(mySetting)등은 들어있지 않다.
5. 프로젝트 폴더로 이동해 장고와 사용했던 패키지들을 설치한다(git master상태).
- pip install django
 . python -m pip install --upgrade pip : pip 업그레이드 하기
- pip install -r requirements.txt : 사용했던 패키지 설치
 . 모두 myvenv내 Lib/SitePackage에 설치 된다.
6. sqiite로 DB설정하기
 . python manage.py makemigrations & python manage.py migrate
7. 정상적으로 로드 되는지 보고 파일의 경로 설정등을 수정하기

